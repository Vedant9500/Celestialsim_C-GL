#version 450 core

layout(local_size_x = 64, local_size_y = 1, local_size_z = 1) in;

layout(std430, binding = 0) buffer PositionBuffer {
    vec4 positions[];
};

layout(std430, binding = 1) buffer VelocityBuffer {
    vec4 velocities[];
};

layout(std430, binding = 2) buffer MassBuffer {
    float masses[];
};

layout(std430, binding = 3) buffer ForceBuffer {
    vec4 forces[];
};

uniform int numParticles;
uniform float deltaTime;

void main() {
    uint index = gl_GlobalInvocationID.x;
    
    if (index >= numParticles) {
        return;
    }
    
    // Verlet integration
    vec3 position = positions[index].xyz;
    vec3 velocity = velocities[index].xyz;
    vec3 force = forces[index].xyz;
    
    // Calculate acceleration
    float mass = masses[index];
    vec3 acceleration = force / mass;
    
    // Update velocity and position
    velocity += acceleration * deltaTime;
    position += velocity * deltaTime;
    
    // Store results
    positions[index] = vec4(position, 1.0);
    velocities[index] = vec4(velocity, 0.0);
}
